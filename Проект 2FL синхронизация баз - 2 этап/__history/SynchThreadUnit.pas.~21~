unit SynchThreadUnit;

interface

uses
  System.Classes, IBQuery, SQLite3, SQLiteWrap, IBDatabase;

type
  TSynchTheard = class(TThread)

  iTotalCount, iProcessingCount:integer; //счетчики всей обработки ит екущей обработки
  SQliteQueryExec, FBqueryExec: TStringList;
  private
    { Private declarations }
  protected

    procedure Execute; override;
    procedure UpDateForm;

  end;


implementation

uses MainUnit;

procedure TSynchTheard.Execute;
var
j: integer;
begin
 iTotalCount := SQliteQueryExec.Count + FBqueryExec.Count;
 iProcessingCount := 0;
 with MainForm do
 begin
 for j := 0 to SQliteQueryExec.Count -1 do
      begin
      Table.Create (db, SQliteQueryExec.Strings[j]);
      iProcessingCount := iProcessingCount + 1;
      Synchronize(UpDateForm);
      Table.free;
      end;

 for j := 0 to FBqueryExec.Count -1 do
  begin
   with IBQuery1 do
      begin
       close;
       SQL.Clear;
       SQL.Add(FBqueryExec.Strings[j]);
       open;
       iProcessingCount := iProcessingCount + 1;
       Synchronize(UpDateForm);
      end;
     IBTransaction1.Commit;
    end;
 end;
end;

procedure TSynchTheard.UpDateForm;
begin
 MainForm.ProgressBar1.Position := (iProcessingCount div iTotalCount)*100;
end;

end.
